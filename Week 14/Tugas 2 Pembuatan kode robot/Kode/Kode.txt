use std::io;

#[derive(Debug)]
enum Command {
    Forward(i32),
    Backward(i32),
    TurnLeft(i32),
    TurnRight(i32),
    Stop,
}

struct Robot {
    x: i32,
    y: i32,
    direction: String,
}

impl Robot {
    fn new() -> Self {
        Robot {
            x: 0,
            y: 0,
            direction: "Up".to_string(),
        }
    }

    fn execute_command(&mut self, command: Command) {
        match command {
            Command::Forward(steps) => {
                self.y += steps;
                println!("Moving forward {} steps. New position: ({}, {})", steps, self.x, self.y);
            }
            Command::Backward(steps) => {
                self.y -= steps;
                println!("Moving backward {} steps. New position: ({}, {})", steps, self.x, self.y);
            }
            Command::TurnLeft(angle) => {
                self.direction = format!("Turned Left {} degrees", angle);
                println!("Turning left {} degrees. Current direction: {}", angle, self.direction);
            }
            Command::TurnRight(angle) => {
                self.direction = format!("Turned Right {} degrees", angle);
                println!("Turning right {} degrees. Current direction: {}", angle, self.direction);
            }
            Command::Stop => {
                println!("Stopping the robot. Final position: ({}, {})", self.x, self.y);
            }
        }
    }
}

fn main() {
    let mut robot = Robot::new();
    println!("Robot Simulation Started!");
    println!("Commands: forward, backward, turn_left, turn_right, stop");

    loop {
        println!("\nEnter a command:");
        let mut input = String::new();
        io::stdin()
            .read_line(&mut input)
            .expect("Failed to read input");
        let input = input.trim();

        match input {
            "forward" => {
                println!("Enter steps:");
                let mut steps = String::new();
                io::stdin()
                    .read_line(&mut steps)
                    .expect("Failed to read steps");
                let steps: i32 = steps.trim().parse().expect("Please enter a valid number");
                robot.execute_command(Command::Forward(steps));
            }
            "backward" => {
                println!("Enter steps:");
                let mut steps = String::new();
                io::stdin()
                    .read_line(&mut steps)
                    .expect("Failed to read steps");
                let steps: i32 = steps.trim().parse().expect("Please enter a valid number");
                robot.execute_command(Command::Backward(steps));
            }
            "turn_left" => {
                println!("Enter angle:");
                let mut angle = String::new();
                io::stdin()
                    .read_line(&mut angle)
                    .expect("Failed to read angle");
                let angle: i32 = angle.trim().parse().expect("Please enter a valid number");
                robot.execute_command(Command::TurnLeft(angle));
            }
            "turn_right" => {
                println!("Enter angle:");
                let mut angle = String::new();
                io::stdin()
                    .read_line(&mut angle)
                    .expect("Failed to read angle");
                let angle: i32 = angle.trim().parse().expect("Please enter a valid number");
                robot.execute_command(Command::TurnRight(angle));
            }
            "stop" => {
                robot.execute_command(Command::Stop);
                break;
            }
            _ => println!("Invalid command. Try again."),
        }
    }

    println!("Simulation Ended. Goodbye!");
}
